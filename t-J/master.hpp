#ifndef MASTER_HPP_INCLUDED
#define MASTER_HPP_INCLUDED
#include <iomanip>
#include "values.hpp"
#include "Hamiltonian/Hamiltonian.hpp"
#include "Hamiltonian/hopping.hpp"
#include "input/input.hpp"
#include "input/pob.hpp"
#include "input/print.hpp"
#include "matworks.hpp"
#include "Operator_NSC/operatorcall.hpp"
//#include "Operator_SC/operatorcall.hpp"
using namespace std;
using namespace Eigen;

void input::Master_print(int ii,int order)
{
     auto start =chrono::steady_clock::now();
    cout<< "======================================================" <<endl; 
    cout<< "length of the interaction: "<< longrange <<endl;
    cout<< "======================================================" <<endl; 

    operators_NSC Oi;
    Oi.J1=J1;
    Oi.J2=J2;
    Oi.t1=t1;
    Oi.t2=t2;
    Oi.JJ=JJ;
    Oi.tt=tt;
    Oi.longrange=longrange;
    Oi.N=N;
    Oi.nup=nup;
    Oi.ndown=ndown;
    Oi.argument=argument;
   
    //=============================================================================================================================================//
    //=============================================================================================================================================//
    char title0[50];
    char title00[50];

    char title1[50];
    char title2[50];

    char title11[50];
    char title22[50];

    char basis0[50];
    char basis1[50];
    char basis2[50];
    //----------------------------------------------------------------------------------------------------------------------------------------------
    int tut0=int(t1*100);                         //| ==== File | F
    int tut1=int(t2*100);
    int tut2=int(J1*100);                         //| ==== File | F
    int tut3=int(J2*100);
    //----------------------------------------------------------------------------------------------------------------------------------------------
    bool path= createDirectory("../Data");
    path= createDirectory("../Data/EV");
    //----------------------------------------------------------------------------------------------------------------------------------------------
    if(ii==0)
    {
        //------------------------------------------------------------------------------------------------------------------------------------------
        sprintf(title1,"../Data/EV/e_up_%d_%d_%d_%d_%lld_%lld_%lld.dat",tut0,tut1,tut2,tut3,N,nup+1,ndown-1); //| ==== Name | I        
        //------------------------------------------------------------------------------------------------------------------------------------------
        sprintf(title2,"../Data/EV/e_down_%d_%d_%d_%d_%lld_%lld_%lld.dat",tut0,tut1,tut2,tut3,N,nup-1,ndown+1); //| ==== Name | I        
        //------------------------------------------------------------------------------------------------------------------------------------------
        sprintf(title11,"../Data/EV/ev_up_%d_%d_%d_%d_%lld_%lld_%lld.dat",tut0,tut1,tut2,tut3,N,nup+1,ndown-1); //| ==== Name | I       
        //------------------------------------------------------------------------------------------------------------------------------------------
        sprintf(title22,"../Data/EV/ev_down_%d_%d_%d_%d_%lld_%lld_%lld.dat",tut0,tut1,tut2,tut3,N,nup-1,ndown+1); //| ==== Name | I     
        //------------------------------------------------------------------------------------------------------------------------------------------
        sprintf(title0,"../Data/EV/e_%d_%d_%d_%d_%lld_%lld_%lld.dat",tut0,tut1,tut2,tut3,N,nup,ndown); //| ==== Name | I        
        //------------------------------------------------------------------------------------------------------------------------------------------
        sprintf(title00,"../Data/EV/ev_%d_%d_%d_%d_%lld_%lld_%lld.dat",tut0,tut1,tut2,tut3,N,nup,ndown); //| ==== Name | I
        //------------------------------------------------------------------------------------------------------------------------------------------
        sprintf(basis0,"../Data/EV/Basis_0_%d_%d_%d_%d_%lld_%lld_%lld.dat",tut0,tut1,tut2,tut3,N,nup,ndown); //| ==== Name | I        
        //------------------------------------------------------------------------------------------------------------------------------------------
        sprintf(basis1,"../Data/EV/Basis_up_%d_%d_%d_%d_%lld_%lld_%lld.dat",tut0,tut1,tut2,tut3,N,nup+1,ndown-1); //| ==== Name | I        
        //------------------------------------------------------------------------------------------------------------------------------------------
        sprintf(basis2,"../Data/EV/Basis_down_%d_%d_%d_%d_%lld_%lld_%lld.dat",tut0,tut1,tut2,tut3,N,nup-1,ndown+1); //| ==== Name | I        
        //------------------------------------------------------------------------------------------------------------------------------------------
    }
    //==============================================================================================================================================//
    //==============================================================================================================================================//
  
    //=========================================================//
    //=========================================================/
    Basis();
    Values();
    //--------------------------------------------------//
    cout<< "======================================================" <<endl; 
    cout<<"J: \n" <<JJ <<"\n"<<endl;
    cout<< "======================================================" <<endl; 
    cout<<"t: \n" <<tt <<"\n"<<endl;
    cout<< "======================================================" <<endl; 
    cout<<"n_up:  "<<nup <<endl;
    cout<<"n_down:  "<<ndown <<endl;
    cout<<"Hilbertspace dimention:  "<<le<<"\n"<<endl;
    cout<< "======================================================" <<endl; 
    BASIS_print();
    //--------------------------------------------------//
    Hamiltonian();
    //--------------------------------------------------//
    cout<< H0 <<endl;
    //--------------------------------------------------//
    pair<MatrixXcd, VectorXd> e = Eigenspectrum(H0);
    Oi.es_0=e.second(0);
    Oi.evs_0=e.first.col(0);
    Oi.basisarray0=basisarray;
    //==========================//
    basisarray.clear();
    H0.resize(0, 0);
    //==========================//
    Oi.le0=le;

    //------------------------------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------------------------------

    //============================================================//
    if(ii==0)
    {
        //=========================================================//
        std::ofstream file00;               //| ==== File | eigen 
        file00.open(title00);               //| ==== Open | vector

        std::ofstream file0;                //| ==== File | eigen
        file0.open(title0);                 //| ==== Open | values

        std::ofstream bes0;                //| ==== File | basis
        bes0.open(basis0);                 //| ==== Open | location
        //----------------------------------------------------------//
        file00 << std::fixed << std::setprecision(16);
        file0 << std::fixed << std::setprecision(16);
        bes0 << std::fixed << std::setprecision(16);
        //=========================================================//
        //=========================================================//
        file0<<e.second<<endl;
        for (int i = 0; i < e.second.size(); i++)
        {
           file00<<e.first.col(i)<<endl;
           file00<<"    "<<endl;
           bes0<<basisarray[i]<<endl;
        }
        //=========================================================//
        file00.close();
        file0.close();
        bes0.close();
        //=========================================================//
    }
    //============================================================//
    //==========================//
    e.second.resize(0);
    e.first.resize(0,0);
    //==========================//
    //------------------------------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------------------------------

    // nup=nup+1;
    // ndown=ndown-1;
    // Basis();
    // Values();
    // //--------------------------------------------------//
    // cout<< "======================================================" <<endl; 
    // cout<<"n_up:  "<<nup <<endl;
    // cout<<"n_down:  "<<ndown <<endl;
    // cout<<"Hilbertspace dimention: "<<le<<"\n"<<endl;
    // cout<< "======================================================" <<endl; 
    // //--------------------------------------------------//
    // Hamiltonian();
    // //--------------------------------------------------//
    // // cout<< H0 <<endl;
    // //--------------------------------------------------//
    // e = Eigenspectrum(H0);
    // Oi.es_up=e.second;
    // Oi.evs_up=e.first;
    // Oi.basisarray_up=basisarray;
    // //==========================//
    // basisarray.clear();
    // H0.resize(0, 0);
    // //==========================//
    // Oi.leup=le;
    // //------------------------------------------------------------------------------------------------------------------------------------------
    // //------------------------------------------------------------------------------------------------------------------------------------------

    // //============================================================//
    // if(ii==0)
    // {
    //     //=========================================================//
    //     std::ofstream file11;               //| ==== File | eigen 
    //     file11.open(title11);               //| ==== Open | vector

    //     std::ofstream file1;                //| ==== File | eigen
    //     file1.open(title1);                 //| ==== Open | values

    //     std::ofstream bes1;                //| ==== File | basis
    //     bes1.open(basis1);                 //| ==== Open | location
    //     //----------------------------------------------------------//
    //     file11 << std::fixed << std::setprecision(16);
    //     file1 << std::fixed << std::setprecision(16);
    //     bes1 << std::fixed << std::setprecision(16);
    //     //=========================================================//
    //     //=========================================================//
    //     file1<<e.second<<endl;
    //     for (int i = 0; i < e.second.size(); i++)
    //     {
    //        file11<<e.first.col(i)<<endl;
    //        file11<<"    "<<endl;
    //        bes1<<basisarray[i]<<endl;
    //     }
    //     //=========================================================//
    //     file11.close();
    //     file1.close();
    //     bes1.close();
    //     //=========================================================//
    // }
    // //============================================================//
    // //==========================//
    // e.second.resize(0);
    // e.first.resize(0,0);
    // //==========================//

    // //------------------------------------------------------------------------------------------------------------------------------------------
    // //------------------------------------------------------------------------------------------------------------------------------------------

    // nup=nup-2;
    // ndown=ndown+2;
    // Basis();
    // Values();
    // //--------------------------------------------------//
    // cout<< "======================================================" <<endl; 
    // cout<<"n_up:  "<<nup <<endl;
    // cout<<"n_down:  "<<ndown <<endl;
    // cout<<"Hilbertspace dimention: "<<le<<"\n"<<endl;
    // cout<< "======================================================" <<endl; 
    // //--------------------------------------------------//
    // Hamiltonian();
    // //--------------------------------------------------//
    // // cout<< H0 <<endl;
    // //--------------------------------------------------//
    // e = Eigenspectrum(H0);
    // Oi.es_down=e.second;
    // Oi.evs_down=e.first;
    // Oi.basisarray_down=basisarray;
    // //==========================//
    // basisarray.clear();
    // H0.resize(0, 0);
    // //==========================//
    // Oi.ledown=le;
    // //------------------------------------------------------------------------------------------------------------------------------------------
    // //------------------------------------------------------------------------------------------------------------------------------------------

    // //============================================================//
    // if(ii==0)
    // {
    //     //=========================================================//
    //     std::ofstream file22;               //| ==== File | eigen 
    //     file22.open(title22);               //| ==== Open | vector

    //     std::ofstream file2;                //| ==== File | eigen
    //     file2.open(title2);                 //| ==== Open | values

    //     std::ofstream bes2;                //| ==== File | basis
    //     bes2.open(basis2);                 //| ==== Open | location
    //     //----------------------------------------------------------//
    //     file22 << std::fixed << std::setprecision(16);
    //     file2 << std::fixed << std::setprecision(16);
    //     bes2 << std::fixed << std::setprecision(16);
    //     //=========================================================//
    //     //=========================================================//
    //     file2<<e.second<<endl;
    //     for (int i = 0; i < e.second.size(); i++)
    //     {
    //        file22<<e.first.col(i)<<endl;
    //        file22<<"    "<<endl;
    //        bes2<<basisarray[i]<<endl;
    //     }
    //     //=========================================================//
    //     file22.close();
    //     file2.close();
    //     bes2.close();
    //     //=========================================================//
    // }
    // //============================================================//

    // //==========================//
    // e.second.resize(0);
    // e.first.resize(0,0);
    // //==========================//

    // //------------------------------------------------------------------------------------------------------------------------------------------
    // //------------------------------------------------------------------------------------------------------------------------------------------
    Oi.JJ=JJ;
    Oi.tt=tt;
    Oi.output(ii,order);
    //------------------------------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------------------------------
    cout<< "======================================================" <<endl; 
    auto end =chrono::steady_clock::now();
    auto diff=end-start;
    cout<<"Time for single point calculation calculation:  "<< chrono::duration <double,milli>(diff).count()<<"   "<<endl;
    cout<< "======================================================" <<endl; 

    //------------------------------------------------------------------------------------------------------------------------------------------
    //------------------------------------------------------------------------------------------------------------------------------------------
}


#endif