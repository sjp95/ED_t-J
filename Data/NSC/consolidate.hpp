#ifndef CONSOLIDATE_HPP_INCLUDED
#define CONSOLIDATE_HPP_INCLUDED
#include <iostream>
#include <iomanip>
#include <cmath>
#include <math.h> 
#include <complex>
#include <Eigen/Dense>
#include <fstream>
#include <omp.h>
#include <vector>
#include<algorithm>
#include "creat_directory.hpp"
#include "input.hpp"

using namespace std;
using namespace Eigen;


void NSC_input::Consolidet_NSC()
{
  //-----------------------------------------------------------------------------------------------------------------------------------------------
  //-----------------------------------------------------------------------------------------------------------------------------------------------
  double Gamma=3;
  //===============================================================================================================================================//
                                                      //======== (Order=0) ========//
  //===============================================================================================================================================//
  //--------------------------------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------------------------------------
  char title0[150];
  sprintf(title0,"../Data/NSC/SX/SXQ/SSX_%d_%d_%d_%d_%d_%d_%d.dat",ttt0,ttt1,jjt0,jjt1,N,nup,ndown); //| ==== Name | I
  std::ifstream file0;               //| ==== File | L
  file0.open(title0);                //| ==== Open | E
  //--------------------------------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------------------------------------
  vector<double> q0 , w0 , Sq0;
  if(file0)
  {
    //-----------------------------------------//
      VectorXd cn=VectorXd:: Zero(3);
      while (file0>>cn(0)>>cn(1)>>cn(2))
      {
        q0.push_back(cn(0));
        w0.push_back(cn(1));
        Sq0.push_back(cn(2));
      } 
    //-----------------------------------------// 
  }
  //===============================================================================================================================================//
  //===============================================================================================================================================//


  //===============================================================================================================================================//
                                                      //======== (Order=1) ========//
  //===============================================================================================================================================//
  //--------------------------------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------------------------------------
  char title1[150];
  sprintf(title1,"../Data/NSC/SXiSiSj/SXQ/SXiSiSj_%d_%d_%d_%d_%d_%d_%d.dat",ttt0,ttt1,jjt0,jjt1,N,nup,ndown);//| ==== Name | I
  std::ifstream file1;               //| ==== File | L
  file1.open(title1);                //| ==== Open | E
  //--------------------------------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------------------------------------
  vector<double> q1 , w1 , Sq1;
  if(file1)
  {
    //-----------------------------------------//
      VectorXd cn=VectorXd:: Zero(3);
      while (file1>>cn(0)>>cn(1)>>cn(2))
      {
        q1.push_back(cn(0));
        w1.push_back(cn(1));
        Sq1.push_back(cn(2));
      }  
    //-----------------------------------------//
  }
  //===============================================================================================================================================//
  //===============================================================================================================================================//


  //===============================================================================================================================================//
                                                      //======== (Order=2) ========//
  //===============================================================================================================================================//
  //--------------------------------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------------------------------------
  char title2[150];
  sprintf(title2,"../Data/NSC/SXiSjSk/SXQ/SXiSjSk_%d_%d_%d_%d_%d_%d_%d.dat",ttt0,ttt1,jjt0,jjt1,N,nup,ndown);//| ==== Name | I
  std::ifstream file2;               //| ==== File | L
  file2.open(title2);                //| ==== Open | E
  //--------------------------------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------------------------------------
  vector<double> q2 , w2 , Sq2;
  if(file2)
  {
    //-----------------------------------------//
      VectorXd cn=VectorXd:: Zero(3);
      while (file2>>cn(0)>>cn(1)>>cn(2))
      {
        q2.push_back(cn(0));
        w2.push_back(cn(1));
        Sq2.push_back(cn(2));
      }  
    //-----------------------------------------//
  }
  //===============================================================================================================================================//
  //===============================================================================================================================================//



  //===============================================================================================================================================//
                                                      //======== Consolided ========//
  //===============================================================================================================================================//
  //--------------------------------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------------------------------------
  char title3[150];
  bool tut=createDirectory("../Data/NSC/Consolidet");
  sprintf(title3,"../Data/NSC/Consolidet/Consolidet_%d_%d_%d_%d_%d_%d_%d.dat",ttt0,ttt1,jjt0,jjt1,N,nup,ndown);//| ==== Name | I
  std::ofstream file;               //| ==== File | L
  file.open(title3);                //| ==== Open | E
  file << std::fixed << std::setprecision(16);
  //--------------------------------------------------------------------------------------------------------------------
  //--------------------------------------------------------------------------------------------------------------------
  double U=*std::max_element(Sq2.begin(), Sq2.end());
  U=2.0*U/(pow(Gamma,4));
  if(q0.size() == q1.size() && q1.size() == q2.size()) 
  {
    for(int i=0;i<w0.size();i++)
    {
      double U1=Sq0[i]+Sq1[i]/pow(Gamma,2)+Sq2[i]/pow(Gamma,4);
      if(w0[i]<6)
      {
        if(U1<U)
        {
          file<<(q0[i]+q1[i]+q2[i])/3.0  <<"     "<< (w0[i]+w1[i]+w2[i])/3.0  <<"     "<< U1 <<endl;
        }
        else
        {
          file<<(q0[i]+q1[i]+q2[i])/3.0  <<"     "<< (w0[i]+w1[i]+w2[i])/3.0  <<"     "<< log10(U1/U)+U <<endl;
        }
      }      
    }
  }
  file.close(); 
  cout<< "Limit1=" <<U<<endl;
  double U1=*std::max_element(Sq0.begin(), Sq0.end());
  cout<< "Limit2=" <<log10(U1/U)+U<<endl;
  //-----------------------------------------------------------------------------------------------------------------------------------------------
  //-----------------------------------------------------------------------------------------------------------------------------------------------

  //===============================================================================================================================================//
  //===============================================================================================================================================//
}

#endif